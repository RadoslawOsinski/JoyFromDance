import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

apply plugin: 'maven'
apply plugin: 'java-library'
apply plugin: 'base'
apply plugin: 'jacoco'

Properties versions = new Properties()
versions.load(new FileInputStream(rootProject.projectDir.path + "/versions.properties"))

version = versions.project_version
group = "dance.joyfrom"
ext.moduleName = 'dance.joyfrom.db'
compileJava.options.encoding = 'UTF-8'

configurations.all {
    exclude group: 'org.jboss.spec.javax.transaction', module: 'jboss-transaction-api_1.2_spec'
    exclude group: 'org.springframework', module: 'spring-jcl'
}

configurations {
    tests
}

dependencies {
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: versions.javax_annotation_api

    implementation group: 'com.zaxxer', name: 'HikariCP', version: versions.hikari
    implementation group: 'org.springframework', name: 'spring-tx', version: versions.spring
    implementation group: 'org.springframework', name: 'spring-jdbc', version: versions.spring
    implementation (group: 'org.springframework', name: 'spring-core', version: versions.spring) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.springframework', module: 'spring-jcl'
    }
    implementation (group: 'org.springframework', name: 'spring-beans', version: versions.spring) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.springframework', module: 'spring-jcl'
    }
    implementation (group: 'org.springframework', name: 'spring-context', version: versions.spring) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.springframework', module: 'spring-jcl'
    }
    api (group: 'org.springframework', name: 'spring-context-support', version: versions.spring) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.springframework', module: 'spring-jcl'
    }
    implementation (group: 'org.springframework', name: 'spring-web', version: versions.spring) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.springframework', module: 'spring-jcl'
    }
    implementation group: 'org.springframework', name: 'spring-orm', version: versions.spring
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
    implementation 'org.apache.commons:commons-lang3:' + versions.commons_lang3

    implementation group: 'com.hazelcast', name: 'hazelcast', version: versions.hazelcast
    implementation group: 'com.hazelcast', name: 'hazelcast-spring', version: versions.hazelcast
    implementation group: 'com.hazelcast', name: 'hazelcast-hibernate52', version: versions.hazelcast_hibernate52
    implementation group: 'com.hazelcast', name: 'hazelcast-kubernetes', version: versions.hazelcast_kubernetes

    api 'org.hibernate:hibernate-validator:' + versions.hibernate_validator
    api 'org.hibernate:hibernate-core:' +versions.hibernate_core
    api 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:' + versions.hibernate_jpa2_api

    api group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
    implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql
    implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway_core
    implementation group: 'commons-io', name: 'commons-io', version: versions.commons_io
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: versions.junit5_platform

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit5
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit5
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: versions.junit5_platform

    testCompile group: 'org.springframework', name: 'spring-test', version: versions.spring
    testRuntime group: 'org.springframework', name: 'spring-test', version: versions.spring
}

def gitCommitHash = "git rev-parse HEAD".execute().text.trim();

compileJava {
    inputs.property("moduleName", moduleName)
    options.compilerArgs += [
//        "-Xlint:deprecation",
        "--module-path", classpath.asPath
    ]
}

jar.archiveName = "JOY_FROM_DANCE_REPOSITORY-" + version + ".jar"
jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes(
            'Automatic-Module-Name': moduleName,
            'Specification-Title': project.name,
            'Specification-Version': version,
            'build-number': System.getenv().BUILD_NUMBER == null ? 'local build' : System.getenv().BUILD_NUMBER,
            'build-id': System.getenv().BUILD_ID == null ? 'local build' : System.getenv().BUILD_ID,
            'Build-Time': ZonedDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ")),
            'Build-Url': System.getenv().BUILD_URL == null ? 'local build' : System.getenv().BUILD_URL,
            'scm-version': gitCommitHash == null ? 'local build' : gitCommitHash,
            'Build-Tag': System.getenv().BUILD_TAG == null ? 'local build' : System.getenv().BUILD_TAG,
            'Jenkins-Url': System.getenv().JENKINS_URL == null ? 'local build' : System.getenv().JENKINS_URL,
            'Build-Workspace': System.getenv().WORKSPACE == null ? 'local build' : System.getenv().WORKSPACE,
            'Git-Url': System.getenv().GIT_URL == null ? 'local build' : System.getenv().GIT_URL,
            'Git-Branch': System.getenv().GIT_BRANCH == null ? 'local build' : System.getenv().GIT_BRANCH
        )
    }
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "TEST-${project.archivesBaseName}".toUpperCase()
    from sourceSets.test.output
}

task integration_tests_local(type: Test) {
    systemProperty "spring.profiles.test-groups", "integration-tests-local"
    systemProperty "spring.profiles.active", "tomcat";
    systemProperty "test-groups", "integration-tests-local";
    systemProperty "test-groups", "integration-tests-local";
}

artifacts {
    tests testJar
}

jacoco {
    toolVersion = versions.jacoco
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.setDestination(new File("${buildDir}/reports/coverage"))
    }
    executionData = files('build/jacoco/test.exec', 'build/jacoco/integration_tests_local.exec')
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'joyFromDance_repository'
        property 'sonar.projectName', 'joyFromDance_repository'
        property 'sonar.sources', 'src/main'
        property 'sonar.tests', 'src/test'
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}
