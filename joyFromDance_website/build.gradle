import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: 'com.moowork.node'
apply plugin: 'maven'
apply plugin: 'java-library'
apply plugin: 'base'
apply plugin: 'jacoco'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

Properties versions = new Properties()
versions.load(new FileInputStream(rootProject.projectDir.path + "/versions.properties"))

version = versions.project_version
group = "dance.joyfrom"
ext.moduleName = 'dance.joyfrom.website'
compileJava.options.encoding = 'UTF-8'

configurations {
    tests
}

dependencies {

    compileOnly group: 'org.springframework.boot', name: 'spring-boot-devtools', version: versions.spring_dev_tools

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: versions.spring_boot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.spring_boot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.spring_boot
    providedRuntime group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: versions.spring_boot
    providedRuntime group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: versions.embeeded_tomcat
    implementation group: 'javax.servlet.jsp.jstl', name: 'jstl-api', version: versions.jstl
    implementation group: 'javax.servlet.jsp', name: 'jsp-api', version: versions.jsp_api
    implementation group: 'taglibs', name: 'standard', version: versions.taglibs

    implementation group: 'org.springframework', name: 'spring-webmvc', version: versions.spring
    implementation group: 'org.springframework', name: 'spring-beans', version: versions.spring
    implementation group: 'org.springframework', name: 'spring-context', version: versions.spring
    implementation group: 'org.springframework', name: 'spring-web', version: versions.spring  //dla CommonsMultipartFile
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: versions.hibernate_validator
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: versions.javax_annotation_api
    implementation group: 'javax.validation', name: 'validation-api', version: versions.javax_validation_api
    implementation group: 'javax.transaction', name: 'javax.transaction-api', version: versions.transaction_api
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: versions.jackson_datatype_jsr310
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jackson_datatype_jsr310
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: versions.servlet_api
    implementation group: 'javax.json', name: 'javax.json-api', version: versions.json_api
    implementation group: 'org.glassfish', name: 'javax.json', version: versions.javax_json
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commons_lang3
    implementation group: 'io.micrometer', name: 'micrometer-core', version: versions.micrometer
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: versions.micrometer
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit5
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: versions.junit5_platform
    testImplementation group: 'org.springframework', name: 'spring-test', version: versions.spring
    testImplementation group: 'com.jayway.jsonpath', name: 'json-path', version: versions.json_path
    testImplementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.json_path
    testImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
}

def gitCommitHash = "git rev-parse HEAD".execute().text.trim()
def gitLocalBranchName = "git rev-parse --abbrev-ref HEAD".execute().text.trim()

compileJava {
    inputs.property("moduleName", moduleName)
    options.compilerArgs += [
        "--module-path", classpath.asPath
    ]
}

springBoot {
    mainClassName = 'dance.joyfrom.WebsiteApplication'
    buildInfo {
        properties {
            additional = [
                'Main-Class': 'dance.joyfrom.WebsiteApplication',
                'Automatic-Module-Name': moduleName,
                'Specification-Title': project.name,
                'Specification-Version': version,
                'build-number': System.getenv().BUILD_NUMBER == null ? 'local build' : System.getenv().BUILD_NUMBER,
                'build-id': System.getenv().BUILD_ID == null ? 'local build' : System.getenv().BUILD_ID,
                'Build-Time': ZonedDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ")),
                'Build-Url': System.getenv().BUILD_URL == null ? 'local build' : System.getenv().BUILD_URL,
                'scm-version': gitCommitHash == null ? 'local build' : gitCommitHash,
                'Build-Tag': System.getenv().BUILD_TAG == null ? 'local build' : System.getenv().BUILD_TAG,
                'Jenkins-Url': System.getenv().JENKINS_URL == null ? 'local build' : System.getenv().JENKINS_URL,
                'Build-Workspace': System.getenv().WORKSPACE == null ? 'local build' : System.getenv().WORKSPACE,
                'Git-Url': System.getenv().GIT_URL == null ? 'local build' : System.getenv().GIT_URL,
                'Git-Branch': System.getenv().GIT_BRANCH == null ? 'local build from: ' + gitLocalBranchName : System.getenv().GIT_BRANCH
            ]
        }
    }
}

war {
    enabled = false
}

war.archiveName = "JOY_FROM_DANCE_WEBSITE.war"
war {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes(
            'Main-Class': 'dance.joyfrom.WebsiteApplication',
            'Automatic-Module-Name': moduleName,
            'Specification-Title': project.name,
            'Specification-Version': version,
            'build-number': System.getenv().BUILD_NUMBER == null ? 'local build' : System.getenv().BUILD_NUMBER,
            'build-id': System.getenv().BUILD_ID == null ? 'local build' : System.getenv().BUILD_ID,
            'Build-Time': ZonedDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ")),
            'Build-Url': System.getenv().BUILD_URL == null ? 'local build' : System.getenv().BUILD_URL,
            'scm-version': gitCommitHash == null ? 'local build' : gitCommitHash,
            'Build-Tag': System.getenv().BUILD_TAG == null ? 'local build' : System.getenv().BUILD_TAG,
            'Jenkins-Url': System.getenv().JENKINS_URL == null ? 'local build' : System.getenv().JENKINS_URL,
            'Build-Workspace': System.getenv().WORKSPACE == null ? 'local build' : System.getenv().WORKSPACE,
            'Git-Url': System.getenv().GIT_URL == null ? 'local build' : System.getenv().GIT_URL,
            'Git-Branch': System.getenv().GIT_BRANCH == null ? 'local build' : System.getenv().GIT_BRANCH
        )
    }
}

task integration_tests_local(type: Test) {
    systemProperty "spring.profiles.test-groups", "integration-tests-local"
    systemProperty "spring.profiles.active", "tomcat";
    systemProperty "test-groups", "integration-tests-local";
    systemProperty "test-groups", "integration-tests-local";
}

jacoco {
    toolVersion = versions.jacoco
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.setDestination(new File("${buildDir}/reports/coverage"))
    }
    executionData = files('build/jacoco/test.exec', 'build/jacoco/integration_tests_local.exec')
}

sonarqube {
    properties {
        property "sonar.projectKey", 'joyFromDance_website'
        property "sonar.projectName", 'joyFromDance_website'
        property "sonar.sources", 'src/main'
        property "sonar.tests", 'src/test'
        property "sonar.sourceEncoding", 'UTF-8'
    }
}

bootRun {
    jvmArgs = ["--add-modules=java.xml.bind"]
    args = ["--spring.profiles.active=dev"]
}
